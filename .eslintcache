[{"E:\\weatherapp\\src\\index.js":"1","E:\\weatherapp\\src\\App.js":"2","E:\\weatherapp\\src\\reportWebVitals.js":"3","E:\\weatherapp\\src\\components\\Today.js":"4","E:\\weatherapp\\src\\components\\Daily.js":"5","E:\\weatherapp\\src\\components\\Hourly.js":"6","E:\\weatherapp\\src\\components\\Maps.js":"7"},{"size":534,"mtime":1610039658330,"results":"8","hashOfConfig":"9"},{"size":5081,"mtime":1611185036835,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":7676,"mtime":1611182678111,"results":"12","hashOfConfig":"9"},{"size":9238,"mtime":1611173800707,"results":"13","hashOfConfig":"9"},{"size":8733,"mtime":1611184861993,"results":"14","hashOfConfig":"9"},{"size":2718,"mtime":1610919767699,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"8i3ggk",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"E:\\weatherapp\\src\\index.js",[],["33","34"],"E:\\weatherapp\\src\\App.js",["35"],"E:\\weatherapp\\src\\reportWebVitals.js",[],"E:\\weatherapp\\src\\components\\Today.js",["36"],"E:\\weatherapp\\src\\components\\Daily.js",["37"],"import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n  faCloudRain,\r\n  faChevronDown,\r\n  faTemperatureHigh,\r\n  faTemperatureLow,\r\n  faTint,\r\n  faWind,\r\n  faArrowsAltV,\r\n  faSun,\r\n  faEye,\r\n  \r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nfunction Daily(props) {\r\n  const [show,setshow] = useState()\r\n  const [isDesktop, setDesktop] = useState(window.innerWidth > 576);\r\n  const [thisday, setday] = useState({});\r\n  const updateMedia = () => {\r\n    setDesktop(window.innerWidth > 576);\r\n    \r\n  };\r\n  const [loaded, setloaded] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateMedia);\r\n    return () => window.removeEventListener(\"resize\", updateMedia);\r\n  });\r\n  useEffect(() => {\r\n    if (props.searched === true) {\r\n      fetch(\r\n        `https://api.weatherbit.io/v2.0/forecast/daily?city=${props.name}&key=438b481d5a99435daccd13ab74b8117b`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((response) => {\r\n          \r\n          setday(response);\r\n          setloaded(true);\r\n\r\n          \r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    }\r\n  }, [props.searched,props.name]);\r\n  \r\n  if (props.searched === true && loaded === true) {\r\n    var myweek = thisday.data.map(function weeksort(itms) {\r\n      var date = new Date(itms.ts * 1000).toLocaleDateString();\r\n      var dmonth = date.split(\"/\")[1];\r\n      var dyear = date.split(\"/\")[2];\r\n      var present = new Date().toLocaleDateString();\r\n      var pmonth = present.split(\"/\")[1];\r\n      var pyear = present.split(\"/\")[2];\r\n      var descrypt = itms.weather.description;\r\n      var mycode = itms.weather.icon;\r\n      \r\n      var pope = itms.pop;\r\n      var windspeed = itms.wind_spd.toFixed(2);\r\n      if (date >= present || dmonth > pmonth || dyear > pyear) {\r\n        return (\r\n          <div key={itms.ts}>\r\n            <Accordion>\r\n              <Card>\r\n                <Card.Header>\r\n                  <Accordion.Toggle eventKey=\"0\">\r\n                    {isDesktop ? (\r\n                      <Container fluid>\r\n                        <Row className=\"d-flex justify-content-around flex-nowrap\">\r\n                          <div>\r\n                            <h4>{date}</h4>\r\n                          </div>\r\n                          <div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                              <img\r\n                                src={`https://www.weatherbit.io/static/img/icons/${mycode}.png`}\r\n                                alt=\"Weather icon\"\r\n                                id=\"dailyicon\"\r\n                              />\r\n                              <h4>{descrypt}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"d-flex justify-content-center align-items-center\">\r\n                            <FontAwesomeIcon\r\n                              icon={faCloudRain}\r\n                              size=\"2x\"\r\n                            ></FontAwesomeIcon>\r\n                            <h4 id=\"dayp\">{pope}%</h4>\r\n                          </div>\r\n                          <FontAwesomeIcon\r\n                            icon={faChevronDown}\r\n                            size=\"2x\"\r\n                          ></FontAwesomeIcon>\r\n                        </Row>\r\n                      </Container>\r\n                    ) : (\r\n                      <Container fluid>\r\n                        <Row className=\"d-flex justify-content-between flex-nowrap\">\r\n                          <div>\r\n                            <p>{date}</p>\r\n                          </div>\r\n                          <div>\r\n                            <img\r\n                              src={`https://www.weatherbit.io/static/img/icons/${mycode}.png`}\r\n                              alt=\"Weather icon\"\r\n                              id=\"dailyicon\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"d-flex justify-content-center align-items-center\" id=\"rain\">\r\n                            <FontAwesomeIcon\r\n                              icon={faCloudRain}\r\n                              size= \"2x\"\r\n                              \r\n                            ></FontAwesomeIcon>\r\n                            <p id=\"dayp\">{pope}%</p>\r\n                          </div>\r\n                          <div>\r\n                            <FontAwesomeIcon\r\n                              icon={faChevronDown}\r\n                            ></FontAwesomeIcon>\r\n                          </div>\r\n                        </Row>\r\n                      </Container>\r\n                    )}\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <Row>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTint}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          dew point\r\n                        </p>\r\n                        <p>{itms.dewpt} C</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faWind}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          wind speed\r\n                        </p>\r\n                        <p>{windspeed} m/s</p>\r\n                      </Col>\r\n\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTemperatureHigh}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          max temp\r\n                        </p>\r\n                        <p>{itms.max_temp} C</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTemperatureLow}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          min temp\r\n                        </p>\r\n                        <p>{itms.min_temp} C</p>\r\n                      </Col>\r\n\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTint}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          humidity(relative)\r\n                        </p>\r\n                        <p>{itms.rh}</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faArrowsAltV}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          pressure(mb)\r\n                        </p>\r\n                        <p>{itms.pres}</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faSun}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          Max UV index\r\n                        </p>\r\n                        <p>{itms.uv}</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faEye}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          Visibility\r\n                        </p>\r\n                        <p>{itms.vis} KM</p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div key={itms.ts}></div>;\r\n      }\r\n    });\r\n    return <div>{myweek}</div>;\r\n  } else if (loaded === false && props.searched === true) {\r\n    \r\n    return (\r\n      <Modal show={show}>\r\n        <Modal.Body>\r\n          Loading\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  } else {\r\n    \r\n    return <Redirect to=\"/\"></Redirect>;\r\n  }\r\n}\r\n\r\nexport default Daily;\r\n","E:\\weatherapp\\src\\components\\Hourly.js",["38"],"E:\\weatherapp\\src\\components\\Maps.js",["39"],"import {\r\n  MapContainer,\r\n  useMapEvents,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n} from \"react-leaflet\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Icon } from \"leaflet\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst skater = new Icon({\r\n  iconUrl:\r\n    \"https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-512.png\",\r\n  iconSize: [25, 25],\r\n});\r\n\r\nfunction Mapsil() {\r\n  \r\n  const [position, setPosition] = useState(null);\r\n  const [tempe, settempe] = useState();\r\n  const [humidity, sethumidity] = useState();\r\n  const [pressure, setpressure] = useState();\r\n  const [dewpt, setdewpt] = useState();\r\n  const [wndspd, setwndspd] = useState();\r\n  const [uvi, setuvi] = useState();\r\n  const [feels, setfeels] = useState();\r\n  const [vis, setvis] = useState();\r\n \r\n  const map = useMapEvents({\r\n    click(e) {\r\n      \r\n      setPosition(e.latlng);\r\n     \r\n      \r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${e.latlng.lat}&lon=${e.latlng.lng}&exclude={minutely,alerts}&units=metric&appid=f294bbf17831f5a084f814e8ead88517`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((response) => {\r\n         \r\n          \r\n          settempe(response.current.temp);\r\n          sethumidity(response.current.humidity);\r\n          setpressure(response.current.pressure);\r\n          setdewpt(response.current.dew_point);\r\n          setwndspd(response.current.wndspd);\r\n          setuvi(response.current.uvi);\r\n          setvis(response.current.visibility);\r\n          setfeels(response.current.feels_like);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n  });\r\n  \r\n  return position === null ? null : (\r\n    <Marker position={position} icon={skater}>\r\n      <Popup className=\"d-flex flex-column\">\r\n        <div>Temperature:{tempe} C</div>\r\n\r\n        <div>Humidity:{humidity} %</div>\r\n\r\n        <div>Pressure:{pressure} hPa</div>\r\n\r\n        <div> Dew point:{dewpt} C</div>\r\n\r\n        <div> Wind speed:{wndspd} m/s</div>\r\n\r\n        <div>UV index:{uvi}</div>\r\n\r\n        <div>Visibility:{vis} metres</div>\r\n\r\n        <div>Feels like:{feels} C</div>\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n}\r\nfunction Maps() {\r\n  \r\n \r\n \r\n  \r\n\r\n  return (\r\n    <Container fluid id=\"mainmap\">\r\n    <MapContainer\r\n      center={[20.5937,78.9629]}\r\n      zoom={5}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <Mapsil></Mapsil>\r\n    </MapContainer>\r\n    </Container>\r\n\r\n  );\r\n}\r\nexport default Maps;\r\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":21,"column":3,"nodeType":"46","messageId":"47","endLine":21,"endColumn":11},{"ruleId":"48","severity":1,"message":"49","line":60,"column":45,"nodeType":"50","messageId":"51","endLine":60,"endColumn":62},{"ruleId":"44","severity":1,"message":"52","line":23,"column":15,"nodeType":"46","messageId":"47","endLine":23,"endColumn":22},{"ruleId":"48","severity":1,"message":"53","line":44,"column":39,"nodeType":"50","messageId":"51","endLine":44,"endColumn":48},{"ruleId":"44","severity":1,"message":"54","line":32,"column":9,"nodeType":"46","messageId":"47","endLine":32,"endColumn":12},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function 'hrdetail'.","FunctionExpression","expectedAtEnd","'setshow' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of function.","'map' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]