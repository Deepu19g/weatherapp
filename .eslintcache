[{"E:\\weatherapp\\src\\index.js":"1","E:\\weatherapp\\src\\App.js":"2","E:\\weatherapp\\src\\reportWebVitals.js":"3","E:\\weatherapp\\src\\components\\Today.js":"4","E:\\weatherapp\\src\\components\\Daily.js":"5","E:\\weatherapp\\src\\components\\Hourly.js":"6","E:\\weatherapp\\src\\components\\Maps.js":"7"},{"size":534,"mtime":1610039658330,"results":"8","hashOfConfig":"9"},{"size":5099,"mtime":1611210509679,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":7661,"mtime":1611210560114,"results":"12","hashOfConfig":"9"},{"size":9238,"mtime":1611173800707,"results":"13","hashOfConfig":"9"},{"size":8733,"mtime":1611184861993,"results":"14","hashOfConfig":"9"},{"size":2718,"mtime":1610919767699,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"8i3ggk",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"18"},"E:\\weatherapp\\src\\index.js",[],["37","38"],"E:\\weatherapp\\src\\App.js",["39"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Col, Container } from \"react-bootstrap\";\nimport \"./components/sylesheets.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nimport Today from \"./components/Today\";\nimport Daily from \"./components/Daily\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCloudRain, faWind } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Hourly from \"./components/Hourly\";\nimport Maps from \"./components/Maps\";\nimport Modal from \"react-bootstrap/Modal\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nlibrary.add(faCloudRain, faWind);\n\nfunction App() {\n  const [tname, settname] = useState(\" \");\n  const [name, setname] = useState(\" \");\n  const [items, setItems] = useState({});\n\n  const [hdetails, sethdetail] = useState({});\n\n  const [late, setlat] = useState();\n  const [long, setlong] = useState();\n\n  const [show, setShow] = useState(true);\n  const [searched, setsearch] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  function onSearch(e) {\n    e.preventDefault();\n\n    \n    fetch(\n      `https://api.weatherbit.io/v2.0/current?city=${tname}&key=438b481d5a99435daccd13ab74b8117b`\n    )\n      .then((res) => res.json())\n      .then((response) => {\n\n        \n          for (const obi of response.data) {\n            setlat(obi.lat);\n\n            setlong(obi.lon);\n          }\n          setname(tname);\n          setItems(response);\n          setsearch(true);\n      })\n\n      .catch((err) => {\n        console.log(err);\n        \n        alert(\"data not found for your request\")\n        setsearch(false)\n      });\n    \n  }\n\n  useEffect(() => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${late}&lon=${long}&exclude={minutely,alerts}&units=metric&appid=f294bbf17831f5a084f814e8ead88517`\n    )\n      .then((res) => res.json())\n      .then((response) => {\n        sethdetail(response);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, [late, long]);\n  function check() {\n    if (searched !== true) {\n      alert(\"search for a city first\");\n    }\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\">\n          <Navbar.Brand href=\"#home\"> Weatherly</Navbar.Brand>\n          <Nav className=\"mr-auto \">\n            <Nav.Link>\n              <Link to=\"/hourly\" onClick={check}>\n                Hourly\n              </Link>\n            </Nav.Link>\n\n            <Nav.Link>\n              <Link to=\"/daily\" onClick={check}>\n                Daily\n              </Link>\n            </Nav.Link>\n            <Nav.Link>\n              <Link to=\"/map\">Map</Link>\n            </Nav.Link>\n\n            <Nav.Link>\n              <Link to=\"/\">Today</Link>\n            </Nav.Link>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <div className=\"d-flex justify-content-center\">\n              <form onSubmit={(e) => onSearch(e)} className=\"search-form\">\n                <input\n                  type=\"text\"\n                  onChange={(e) => settname(e.target.value)}\n                  placeholder=\"Enter the name of city\"\n                  required\n                ></input>\n                <Button type=\"submit\" className=\"submit-button\">\n                  submit\n                </Button>\n              </form>\n            </div>\n            <Container fluid>\n              <Today data={items} name={name} hdetails={hdetails} searched={searched}></Today>\n            </Container>\n          </Route>\n          <Route path=\"/hourly\">\n            <div id=\"mydiv\">\n              <Container\n                fluid\n                className=\"d-flex flex-column justify-content-center align-items-center\"\n              >\n                <Col md={6} id=\"hr\">\n                  <Hourly hdetails={hdetails} searched={searched}></Hourly>\n                </Col>\n              </Container>\n            </div>\n          </Route>\n          <Route path=\"/daily\">\n            <div id=\"daily\">\n              <Container\n                fluid\n                className=\"d-flex flex-column align-items-center\"\n              >\n                <Col md={7}>\n                  <Daily searched={searched} name={name}></Daily>\n                </Col>\n              </Container>\n            </div>\n          </Route>\n          <Route path=\"/map\">\n            <Maps></Maps>\n            <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Reminder</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                Double tap on any location on map to know current weather\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleClose}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","E:\\weatherapp\\src\\reportWebVitals.js",[],"E:\\weatherapp\\src\\components\\Today.js",["40"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTint,\r\n  faWind,\r\n  faArrowsAltV,\r\n  faTemperatureLow,\r\n  faSun,\r\n  faEye,\r\n  faLungs,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nfunction Today(props) {\r\n  const [humidity, sethumidity] = useState(0);\r\n  const [atm, setatm] = useState(0);\r\n  const [speed, setspeed] = useState(0);\r\n  //const [myhrarr, setmyhrarr] = useState([]);\r\n  const [temper, settemp] = useState(0);\r\n  const [feelslike, setfeels] = useState();\r\n\r\n  const [iconcode, setcode] = useState(0);\r\n  const [descrypt, setdes] = useState(\" \");\r\n // const [curtime, settime] = useState();\r\n  const [aqi, setaqi] = useState();\r\n  const [dewpt, setdewpt] = useState();\r\n  const [vis, setvis] = useState();\r\n  const [uv, setuv] = useState();\r\n  \r\n  useEffect(() => {\r\n    for (const [key, value] of Object.entries(props.data)) {\r\n      \r\n\r\n      if (key === \"data\") {\r\n        for (const obj of value) {\r\n          settemp(obj.temp);\r\n          setfeels(obj.app_temp);\r\n          setatm(obj.slp);\r\n          sethumidity(obj.rh.toFixed(2));\r\n          setspeed(obj.wind_spd.toFixed(2));\r\n          setdes(obj.weather.description);\r\n          setcode(obj.weather.icon);\r\n          setaqi(obj.aqi);\r\n          setdewpt(obj.dewpt);\r\n          setvis(obj.vis);\r\n          setuv(obj.uv.toFixed(2));\r\n        }\r\n      }\r\n    }\r\n  }, [props.data]);\r\n  \r\n  var mytemhrarr=[];\r\n  if (Object.keys(props.hdetails).length > 2) {\r\n    \r\n    var i=0;\r\n    var time = new Date().toLocaleTimeString().split(\":\")[0];\r\n\r\n    var curdate = new Date().toLocaleDateString();\r\n     mytemhrarr = props.hdetails.hourly.map(function hrdetail(itd) {\r\n      \r\n      var dtxtime = new Date(itd.dt * 1000).toLocaleTimeString().split(\":\")[0];\r\n      var dtxpm = 0;\r\n      var dtxdate = new Date(itd.dt * 1000).toLocaleDateString();\r\n\r\n      if (\r\n        ((dtxtime >= time && dtxdate === curdate) || dtxdate > curdate) &&\r\n        (i < 4)\r\n      ) {\r\n        \r\n        i++;\r\n        for (const myobj of itd.weather) {\r\n          var icod = myobj.icon;\r\n        }\r\n        \r\n        if (dtxtime > 12) {\r\n          dtxpm = Number(dtxtime) - 12;\r\n        }\r\n        \r\n        if (dtxpm === 0) {\r\n          \r\n         \r\n\r\n          return (\r\n            <Col xs={3} key={itd.dt}>\r\n              <img\r\n                id=\"wicon\"\r\n                src={`http://openweathermap.org/img/wn/${icod}@2x.png`}\r\n                alt=\"Weather icon\"\r\n              />\r\n\r\n              <p>{itd.temp}C</p>\r\n\r\n              <h4>{dtxtime}am</h4>\r\n            </Col>\r\n          );\r\n        } else {\r\n          \r\n          return (\r\n            <Col xs={3} key={itd.dt}>\r\n              <img\r\n                id=\"wicon\"\r\n                src={`http://openweathermap.org/img/wn/${icod}@2x.png`}\r\n                alt=\"Weather icon\"\r\n              />\r\n\r\n              <p>{itd.temp}C</p>\r\n\r\n              <h4>{dtxpm}pm</h4>\r\n            </Col>\r\n          );\r\n        }\r\n        \r\n        \r\n        \r\n      }\r\n      else{\r\n        <div key={itd.dt}></div>\r\n      }\r\n    });\r\n    \r\n  }\r\n  if (props.searched===true) {\r\n    return (\r\n      <div>\r\n        <Container\r\n          fluid\r\n          className=\"d-flex flex-column align-items-center\"\r\n          id=\"sup\"\r\n        >\r\n          <Col md={6} id=\"main\" className=\"d-flex justify-content-between \">\r\n            <div>\r\n              <h1 id=\"first\">{temper} C</h1>\r\n              <h3 id=\"second\">{props.name}</h3>\r\n\r\n              <h3 id=\"third\">{descrypt}</h3>\r\n            </div>\r\n            <div>\r\n              <div id=\"icon\">\r\n                <img\r\n                  src={`https://www.weatherbit.io/static/img/icons/${iconcode}.png `}\r\n                  alt=\"Weather icon\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col md={6} id=\"more\">\r\n            <Row>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    {\" \"}\r\n                    <FontAwesomeIcon icon={faTint} id=\"font\"></FontAwesomeIcon>\r\n                    humidity:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{humidity}</p>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon\r\n                      icon={faArrowsAltV}\r\n                      id=\"font\"\r\n                    ></FontAwesomeIcon>\r\n                    pressure:{\" \"}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{atm} mb</p>\r\n                </div>\r\n              </Col>\r\n\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faWind} id=\"font\"></FontAwesomeIcon>\r\n                    windspeed:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p> {speed} m/s</p>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon\r\n                      icon={faTemperatureLow}\r\n                      id=\"font\"\r\n                    ></FontAwesomeIcon>\r\n                    feels like:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{feelslike} C</p>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faLungs} id=\"font\"></FontAwesomeIcon>\r\n                    aqi:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{aqi}[EPA]</p>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faTint} id=\"font\"></FontAwesomeIcon>\r\n                    dew point:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{dewpt} C</p>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faEye} id=\"font\"></FontAwesomeIcon>\r\n                    visibility:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{vis} km</p>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} className=\"d-flex justify-content-between\">\r\n                <div>\r\n                  <p>\r\n                    <FontAwesomeIcon icon={faSun} id=\"font\"></FontAwesomeIcon>{\" \"}\r\n                    UV index:\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p>{uv}</p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col\r\n            md={6}\r\n            id=\"hrp\"\r\n            className=\"d-flex flex-column justify-content-between\"\r\n          >\r\n            <h2 id=\"idk\">hourly forecast</h2>\r\n            <Row id=\"hrdata\">{mytemhrarr}</Row>\r\n          </Col>\r\n        </Container>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n}\r\n\r\nexport default Today;\r\n","E:\\weatherapp\\src\\components\\Daily.js",["41"],"import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n  faCloudRain,\r\n  faChevronDown,\r\n  faTemperatureHigh,\r\n  faTemperatureLow,\r\n  faTint,\r\n  faWind,\r\n  faArrowsAltV,\r\n  faSun,\r\n  faEye,\r\n  \r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nfunction Daily(props) {\r\n  const [show,setshow] = useState()\r\n  const [isDesktop, setDesktop] = useState(window.innerWidth > 576);\r\n  const [thisday, setday] = useState({});\r\n  const updateMedia = () => {\r\n    setDesktop(window.innerWidth > 576);\r\n    \r\n  };\r\n  const [loaded, setloaded] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateMedia);\r\n    return () => window.removeEventListener(\"resize\", updateMedia);\r\n  });\r\n  useEffect(() => {\r\n    if (props.searched === true) {\r\n      fetch(\r\n        `https://api.weatherbit.io/v2.0/forecast/daily?city=${props.name}&key=438b481d5a99435daccd13ab74b8117b`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((response) => {\r\n          \r\n          setday(response);\r\n          setloaded(true);\r\n\r\n          \r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    }\r\n  }, [props.searched,props.name]);\r\n  \r\n  if (props.searched === true && loaded === true) {\r\n    var myweek = thisday.data.map(function weeksort(itms) {\r\n      var date = new Date(itms.ts * 1000).toLocaleDateString();\r\n      var dmonth = date.split(\"/\")[1];\r\n      var dyear = date.split(\"/\")[2];\r\n      var present = new Date().toLocaleDateString();\r\n      var pmonth = present.split(\"/\")[1];\r\n      var pyear = present.split(\"/\")[2];\r\n      var descrypt = itms.weather.description;\r\n      var mycode = itms.weather.icon;\r\n      \r\n      var pope = itms.pop;\r\n      var windspeed = itms.wind_spd.toFixed(2);\r\n      if (date >= present || dmonth > pmonth || dyear > pyear) {\r\n        return (\r\n          <div key={itms.ts}>\r\n            <Accordion>\r\n              <Card>\r\n                <Card.Header>\r\n                  <Accordion.Toggle eventKey=\"0\">\r\n                    {isDesktop ? (\r\n                      <Container fluid>\r\n                        <Row className=\"d-flex justify-content-around flex-nowrap\">\r\n                          <div>\r\n                            <h4>{date}</h4>\r\n                          </div>\r\n                          <div>\r\n                            <div className=\"d-flex align-items-center\">\r\n                              <img\r\n                                src={`https://www.weatherbit.io/static/img/icons/${mycode}.png`}\r\n                                alt=\"Weather icon\"\r\n                                id=\"dailyicon\"\r\n                              />\r\n                              <h4>{descrypt}</h4>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"d-flex justify-content-center align-items-center\">\r\n                            <FontAwesomeIcon\r\n                              icon={faCloudRain}\r\n                              size=\"2x\"\r\n                            ></FontAwesomeIcon>\r\n                            <h4 id=\"dayp\">{pope}%</h4>\r\n                          </div>\r\n                          <FontAwesomeIcon\r\n                            icon={faChevronDown}\r\n                            size=\"2x\"\r\n                          ></FontAwesomeIcon>\r\n                        </Row>\r\n                      </Container>\r\n                    ) : (\r\n                      <Container fluid>\r\n                        <Row className=\"d-flex justify-content-between flex-nowrap\">\r\n                          <div>\r\n                            <p>{date}</p>\r\n                          </div>\r\n                          <div>\r\n                            <img\r\n                              src={`https://www.weatherbit.io/static/img/icons/${mycode}.png`}\r\n                              alt=\"Weather icon\"\r\n                              id=\"dailyicon\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"d-flex justify-content-center align-items-center\" id=\"rain\">\r\n                            <FontAwesomeIcon\r\n                              icon={faCloudRain}\r\n                              size= \"2x\"\r\n                              \r\n                            ></FontAwesomeIcon>\r\n                            <p id=\"dayp\">{pope}%</p>\r\n                          </div>\r\n                          <div>\r\n                            <FontAwesomeIcon\r\n                              icon={faChevronDown}\r\n                            ></FontAwesomeIcon>\r\n                          </div>\r\n                        </Row>\r\n                      </Container>\r\n                    )}\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <Row>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTint}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          dew point\r\n                        </p>\r\n                        <p>{itms.dewpt} C</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faWind}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          wind speed\r\n                        </p>\r\n                        <p>{windspeed} m/s</p>\r\n                      </Col>\r\n\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTemperatureHigh}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          max temp\r\n                        </p>\r\n                        <p>{itms.max_temp} C</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTemperatureLow}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          min temp\r\n                        </p>\r\n                        <p>{itms.min_temp} C</p>\r\n                      </Col>\r\n\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTint}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          humidity(relative)\r\n                        </p>\r\n                        <p>{itms.rh}</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faArrowsAltV}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          pressure(mb)\r\n                        </p>\r\n                        <p>{itms.pres}</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faSun}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          Max UV index\r\n                        </p>\r\n                        <p>{itms.uv}</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faEye}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          Visibility\r\n                        </p>\r\n                        <p>{itms.vis} KM</p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div key={itms.ts}></div>;\r\n      }\r\n    });\r\n    return <div>{myweek}</div>;\r\n  } else if (loaded === false && props.searched === true) {\r\n    \r\n    return (\r\n      <Modal show={show}>\r\n        <Modal.Body>\r\n          Loading\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  } else {\r\n    \r\n    return <Redirect to=\"/\"></Redirect>;\r\n  }\r\n}\r\n\r\nexport default Daily;\r\n",["42","43"],"E:\\weatherapp\\src\\components\\Hourly.js",["44"],"import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  \r\n  faChevronDown,\r\n  faTint,\r\n  faWind,\r\n  faArrowsAltV,\r\n  faTemperatureLow,\r\n  faSun,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\nfunction Hourly(props) {\r\n  const [isDesktop, setdDesktop] = useState(window.innerWidth > 576);\r\n  \r\n  \r\n  const updatedMedia = () => {\r\n    if (window.innerWidth > 576) {\r\n      setdDesktop(true);\r\n    } else {\r\n      setdDesktop(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    \r\n    window.addEventListener(\"resize\", updatedMedia);\r\n    return () => window.removeEventListener(\"resize\", updatedMedia);\r\n  });\r\n  \r\n  var des;\r\n  var temp2;\r\n  var temphrobj = props.hdetails;\r\n  var presenttime = new Date().toLocaleTimeString().split(\":\")[0];\r\n  var presentdate = new Date().toLocaleDateString();\r\n  var presentm = presentdate.split(\"/\")[1];\r\n  var presenty = presentdate.split(\"/\")[2];\r\n  if (Object.keys(temphrobj).length > 2 &&props.searched===true) {\r\n    var mylist = temphrobj.hourly.map(function (item) {\r\n      for (const myobj2 of item.weather) {\r\n        var iconcode = myobj2.icon;\r\n        des = myobj2.description;\r\n      }\r\n\r\n      temp2 = item.temp.toString().split(\".\")[0];\r\n\r\n      var dtxd = new Date(item.dt * 1000).toLocaleDateString();\r\n      var dtxt = new Date(item.dt * 1000).toLocaleTimeString().split(\":\")[0];\r\n      var dtxm = dtxd.split(\"/\")[1];\r\n      var dtxy = dtxd.split(\"/\")[2];\r\n      var dtxt2;\r\n      if (dtxt > 12) {\r\n        dtxt2 = Number(dtxt) - 12;\r\n      }\r\n      if (\r\n        (dtxt >= presenttime && dtxd === presentdate) ||\r\n        dtxd > presentdate ||\r\n        dtxm > presentm ||\r\n        dtxy > presenty\r\n      ) {\r\n        return (\r\n          <div key={item.dt} className=\"d-flex justify-content-center\">\r\n            <Accordion>\r\n              <Card>\r\n                <Card.Header>\r\n                  <Accordion.Toggle eventKey=\"0\">\r\n                    {isDesktop ? (\r\n                      <Container fluid>\r\n                        <Row className=\"d-flex align-items-center\">\r\n                          {dtxt > 12 ? (\r\n                            <Col xs={4}>\r\n                              <h3>\r\n                                {dtxd}\r\n                                <br></br>\r\n                                {dtxt2}pm\r\n                              </h3>\r\n                            </Col>\r\n                          ) : (\r\n                            <Col xs={4}>\r\n                              <h3>\r\n                                {dtxd}\r\n                                <br></br>\r\n                                {dtxt} am\r\n                              </h3>\r\n                            </Col>\r\n                          )}\r\n\r\n                          <Col xs={4} className=\"d-flex align-items-center\">\r\n                            <div>\r\n                              <img\r\n                                id=\"wicon2\"\r\n                                src={`http://openweathermap.org/img/wn/${iconcode}@2x.png`}\r\n                                alt=\"Weather icon\"\r\n                              />\r\n                            </div>\r\n                            <div>\r\n                              <h3>{des}</h3>\r\n                            </div>\r\n                          </Col>\r\n\r\n                          <Col>\r\n                            <h3>{temp2} C</h3>\r\n                          </Col>\r\n                          <Col>\r\n                            <FontAwesomeIcon\r\n                              icon={faChevronDown}\r\n                              size=\"2x\"\r\n                            ></FontAwesomeIcon>\r\n                          </Col>\r\n                        </Row>\r\n                      </Container>\r\n                    ) : (\r\n                      <Container fluid>\r\n                        <Row className=\"d-flex justify-content-between align-items-center flex-nowrap\">\r\n                          {dtxt > 12 ? (\r\n                            <div>\r\n                              <p>\r\n                                {dtxd}\r\n                                <br></br>\r\n                                {dtxt2}pm\r\n                              </p>\r\n                            </div>\r\n                          ) : (\r\n                            <div>\r\n                              <p>\r\n                                {dtxd}\r\n                                <br></br>\r\n                                {dtxt} am\r\n                              </p>\r\n                            </div>\r\n                          )}\r\n\r\n                          <div>\r\n                            <img\r\n                              id=\"wicon2\"\r\n                              src={`http://openweathermap.org/img/wn/${iconcode}@2x.png`}\r\n                              alt=\"Weather icon\"\r\n                            />\r\n                          </div>\r\n\r\n                          <div>\r\n                            <p>{temp2} C</p>\r\n                          </div>\r\n                          <div>\r\n                            <FontAwesomeIcon\r\n                              icon={faChevronDown}\r\n                            ></FontAwesomeIcon>\r\n                          </div>\r\n                        </Row>\r\n                      </Container>\r\n                    )}\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body>\r\n                    <Row>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTint}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          humidity\r\n                        </p>\r\n                        <p>{item.humidity}%</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTemperatureLow}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          Feels like\r\n                        </p>\r\n                        <p>{item.feels_like} C</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          {\" \"}\r\n                          <FontAwesomeIcon\r\n                            icon={faWind}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          wind speed\r\n                        </p>\r\n                        <p>{item.wind_speed} m/s</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faTint}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          dew point\r\n                        </p>\r\n                        <p>{item.dew_point} C</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faArrowsAltV}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          pressure\r\n                        </p>\r\n                        <p>{item.pressure} hPa</p>\r\n                      </Col>\r\n                      <Col md={6} className=\"d-flex justify-content-between\">\r\n                        <p>\r\n                          <FontAwesomeIcon\r\n                            icon={faSun}\r\n                            id=\"font\"\r\n                          ></FontAwesomeIcon>\r\n                          UV index\r\n                        </p>\r\n                        <p>{item.uvi}</p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n        );\r\n      }\r\n      else{\r\n        <div key={item.dt}></div>\r\n      }\r\n    });\r\n    return <div>{mylist}</div>;\r\n  } \r\n  else{\r\n    return <Redirect to=\"/\"></Redirect>\r\n  }\r\n}\r\n\r\nexport default Hourly;\r\n","E:\\weatherapp\\src\\components\\Maps.js",["45"],"import {\r\n  MapContainer,\r\n  useMapEvents,\r\n  Marker,\r\n  Popup,\r\n  TileLayer,\r\n} from \"react-leaflet\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Icon } from \"leaflet\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst skater = new Icon({\r\n  iconUrl:\r\n    \"https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-512.png\",\r\n  iconSize: [25, 25],\r\n});\r\n\r\nfunction Mapsil() {\r\n  \r\n  const [position, setPosition] = useState(null);\r\n  const [tempe, settempe] = useState();\r\n  const [humidity, sethumidity] = useState();\r\n  const [pressure, setpressure] = useState();\r\n  const [dewpt, setdewpt] = useState();\r\n  const [wndspd, setwndspd] = useState();\r\n  const [uvi, setuvi] = useState();\r\n  const [feels, setfeels] = useState();\r\n  const [vis, setvis] = useState();\r\n \r\n  const map = useMapEvents({\r\n    click(e) {\r\n      \r\n      setPosition(e.latlng);\r\n     \r\n      \r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${e.latlng.lat}&lon=${e.latlng.lng}&exclude={minutely,alerts}&units=metric&appid=f294bbf17831f5a084f814e8ead88517`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((response) => {\r\n         \r\n          \r\n          settempe(response.current.temp);\r\n          sethumidity(response.current.humidity);\r\n          setpressure(response.current.pressure);\r\n          setdewpt(response.current.dew_point);\r\n          setwndspd(response.current.wndspd);\r\n          setuvi(response.current.uvi);\r\n          setvis(response.current.visibility);\r\n          setfeels(response.current.feels_like);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    },\r\n  });\r\n  \r\n  return position === null ? null : (\r\n    <Marker position={position} icon={skater}>\r\n      <Popup className=\"d-flex flex-column\">\r\n        <div>Temperature:{tempe} C</div>\r\n\r\n        <div>Humidity:{humidity} %</div>\r\n\r\n        <div>Pressure:{pressure} hPa</div>\r\n\r\n        <div> Dew point:{dewpt} C</div>\r\n\r\n        <div> Wind speed:{wndspd} m/s</div>\r\n\r\n        <div>UV index:{uvi}</div>\r\n\r\n        <div>Visibility:{vis} metres</div>\r\n\r\n        <div>Feels like:{feels} C</div>\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n}\r\nfunction Maps() {\r\n  \r\n \r\n \r\n  \r\n\r\n  return (\r\n    <Container fluid id=\"mainmap\">\r\n    <MapContainer\r\n      center={[20.5937,78.9629]}\r\n      zoom={5}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <Mapsil></Mapsil>\r\n    </MapContainer>\r\n    </Container>\r\n\r\n  );\r\n}\r\nexport default Maps;\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":21,"column":3,"nodeType":"52","messageId":"53","endLine":21,"endColumn":11},{"ruleId":"54","severity":1,"message":"55","line":60,"column":45,"nodeType":"56","messageId":"57","endLine":60,"endColumn":62},{"ruleId":"50","severity":1,"message":"58","line":23,"column":15,"nodeType":"52","messageId":"53","endLine":23,"endColumn":22},{"ruleId":"46","replacedBy":"59"},{"ruleId":"48","replacedBy":"60"},{"ruleId":"54","severity":1,"message":"61","line":44,"column":39,"nodeType":"56","messageId":"57","endLine":44,"endColumn":48},{"ruleId":"50","severity":1,"message":"62","line":32,"column":9,"nodeType":"52","messageId":"53","endLine":32,"endColumn":12},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function 'hrdetail'.","FunctionExpression","expectedAtEnd","'setshow' is assigned a value but never used.",["63"],["64"],"Array.prototype.map() expects a value to be returned at the end of function.","'map' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]